<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="100"><Box name="Socket Server" id="1" localization="8" tooltip="" x="311" y="101"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json
from socket import *

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.dialog = ALProxy('ALDialog')
        self.memory = ALProxy('ALMemory')

        self.server_host = "10.0.0.3"
        self.server_port = 9051


        self.pckman = ALProxy('PackageManager')

        #get packageinfolist and get name for each package
#        packagelist = self.pckman.packages2()
#        self.logger.debug(self.pckman.packages())
#        self.packagenames = []
#        for package in packagelist:
#            for item in package:
#                if item[0] == 'elems':
#                    for elems in item:
#                        for elemitem in elems:
#                            if elemitem[0] == 'services':
#                                inneritem = elemitem[1]
#                                for innerelem in inneritem:
#                                    for nameitem in innerelem:
#                                        if nameitem[0] == 'name':
#                                            self.packagenames.append(nameitem[1])

#        #self.logger.debug(self.packagenames)
#        self.memory.insertData('InstalledPackages',self.packagenames)

    def onLoad(self):

        pass

    def onUnload(self):
        #put clean-up code here
        #self.server_socket.shutdown(SHUT_RDWR)
        self.server_socket.close()
        self.logger.debug("Socket closed!")
        pass

    def onInput_onStart(self):
        #create UDP socket
        self.server_socket = socket(AF_INET, SOCK_DGRAM)
        self.server_socket.setsockopt(SOL_SOCKET,SO_REUSEADDR, 1)

        last_output = "";
        last_valid_input = "";

        #bind IP:port to socket
        try:
            self.server_socket.bind((self.server_host,self.server_port))
            #self.logger.debug( 'The server is ready to receive')
        except:
            self.server_socket.close()
            self.logger.debug( 'Could not open socket')

        while True:
            #Wait for packet to be sent
            try:
                packet, client_address = self.server_socket.recvfrom(1024)
            except:
                self.logger.debug("Client connection error")
                break

            #once file is received:
            decoded_packet = packet.decode() #decode packet
            parsed_json = json.loads(decoded_packet) #parse json

            #do something with json
            self.logger.debug("Received message = "+ str(parsed_json['msg']))

            self.memory.insertData('ActualLastMessage',self.memory.getData("Dialog/LastInput"))

            self.dialog.forceInput(str(parsed_json['msg']))

            response = self.memory.getData("Dialog/Answered")


            #Check if invalid input to dialog system then output default message
            if(last_output == response or response==""):
                if(last_valid_input != str(parsed_json['msg'])):
                    last_output = response
                    response = "Sorry, I did not understand you."
                    self.tts.say(response)

            else:
                self.logger.debug("Point AAA")
                last_output = response
                last_valid_input = str(parsed_json['msg'])

            self.logger.debug("Message to send back: " + str(response))
            parsed_json['msg'] = response #change value to response

            #response to client
            decoded_packet = json.dumps(parsed_json) #serializes data

            #encode data and send packet to client
            self.server_socket.sendto(decoded_packet.encode(),client_address)
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Pepper_Status" id="2" localization="8" tooltip="" x="185" y="185"><dialogFile>../Pepper_Status/Pepper_Status.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Sport" id="4" localization="8" tooltip="" x="434" y="496"><dialogFile>../Sport/Sport.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Connection" id="5" localization="8" tooltip="" x="108" y="297"><dialogFile>../Connection/Connection.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Pepper_Sensor" id="3" localization="8" tooltip="" x="297" y="339"><dialogFile>../Pepper_Sensor/Pepper_Sensor.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>